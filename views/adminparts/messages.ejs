<div class="admin-messages">
    <div class="head">
        <div class="webtoonz-sub msg-all" onclick="showAll()">All</div>
        <div class="webtoonz-sub msg-unreplied" onclick="showUnreplied()">Unreplied</div>
        <div class="webtoonz-sub msg-replied" onclick="showreplied()">Replied</div>
    </div>
    <div class="message-list">
        <!-- Messages will be dynamically inserted here -->
      </div>
    
      <!-- Message Details Modal -->
      <div id="message-modal" class="modal hidden">
        <div class="modal-content">
          <h2 id="modal-sender-name"></h2>
          <p><strong>Email:</strong> <span id="modal-email"></span></p>
          <p><strong>Message:</strong></p>
          <p id="modal-message-body"></p>
          <p><strong>Time:</strong> <span id="modal-time"></span></p>
          <button class="reply-button" onclick="showReplyForm()">Reply</button>
          <button class="close-button" onclick="closeModal()">Close</button>
        </div>
      </div>
    
      <!-- Reply Form Modal -->
      <div id="reply-modal" class="modal hidden">
        <div class="modal-content">
          <h2>Reply to <span id="reply-to-name"></span></h2>
          <textarea class="reply-input" placeholder="Write your reply here..."></textarea>
          <br>
          <button class="send-button">Send Reply</button>
          <button class="close-button" onclick="closeModal()">Close</button>
        </div>
      </div>
    
</div>

<script>
    // Array of messages
let messages = <%- JSON.stringify(messages) -%>;
let messageId =  null;
const log = console.log;
let showing = 'unreplied'

// Function to render messages in the list
function renderMessages() {
  const messageList = document.querySelector(".message-list");
  messageList.innerHTML = ""; // Clear any existing content

  messages.forEach((msg, index) => {
    if(showing === 'all'){
      const card = document.createElement("div");
      card.className = "message-card";
      card.onclick = () =>
        showMessageDetails(msg.name, msg.email, msg.message, msg.createdAt);
        messageId = msg._id;
      card.innerHTML = `
        <h3 class="sender-name">${msg.name}</h3>
        <p class="message-preview">${msg.message.slice(0, 40)}...</p>
        <span class="message-time">${msg.createdAt.split(",")[2]}</span>
      `;

      messageList.appendChild(card);
      return;
    };


    if(msg.status === showing){
      const card = document.createElement("div");
      card.className = "message-card";
      card.onclick = () =>
        showMessageDetails(msg.name, msg.email, msg.message, msg.createdAt);
        messageId = msg._id;
      card.innerHTML = `
        <h3 class="sender-name">${msg.name}</h3>
        <p class="message-preview">${msg.message.slice(0, 40)}...</p>
        <span class="message-time">${msg.createdAt.split(",")[2]}</span>
      `;

      messageList.appendChild(card);
    }
    
  });
}


function showMessageDetails(name, email, message, time) {
  document.getElementById("modal-sender-name").innerText = name;
  document.getElementById("modal-email").innerText = email;
  document.getElementById("modal-message-body").innerText = message;
  document.getElementById("modal-time").innerText = time;
  document.getElementById("message-modal").classList.remove("hidden");
}


function showReplyForm() {
  document.getElementById("reply-modal").classList.remove("hidden");
  document.getElementById("reply-to-name").innerText = document.getElementById(
    "modal-sender-name"
  ).innerText;
  document.getElementById("message-modal").classList.add("hidden");
}


function closeModal() {
  messageId = null;
  document.querySelectorAll(".modal").forEach((modal) => modal.classList.add("hidden"));
}

// Render the messages on page load
document.addEventListener("DOMContentLoaded", showUnreplied);


// reply the message 
document.querySelector('.send-button').addEventListener('click', async (e) => {
  if(isLoading) return;
  isLoading = true
  let reply = document.querySelector('.reply-input').value;

  if(messageId){
    try {
      let res = await fetch('/twp/admin/reply', {
        method: 'POST',
        body: JSON.stringify({messageId, reply}),
        headers: {'Content-Type' : 'application/json'}
      });

      let data = await res.json();

      let {E,M, msgs} = data;

      if(E) throw new Error(E);
      log(M);
      messages = msgs;
    } catch (err) {
      console.log(err.message);
    }
    finally{
      messageId = null;
      renderMessages();
      closeModal()
      isLoading = false
    }
  }
})


function showAll(){
  document.querySelector('.msg-all').style.color = '#e44616';
  document.querySelector('.msg-unreplied').style.color = '#abb8c3';
  document.querySelector('.msg-replied').style.color = '#abb8c3';
  showing = 'all';
  renderMessages()
}

function showUnreplied(){
  document.querySelector('.msg-all').style.color = '#abb8c3';
  document.querySelector('.msg-unreplied').style.color = '#e44616';
  document.querySelector('.msg-replied').style.color = '#abb8c3';
  showing = 'unreplied';
  renderMessages();
}

function showreplied(){
  document.querySelector('.msg-all').style.color = '#abb8c3';
  document.querySelector('.msg-unreplied').style.color = '#abb8c3';
  document.querySelector('.msg-replied').style.color = '#e44616';
  showing = 'replied';
  renderMessages();
}
  </script>